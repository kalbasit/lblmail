<?php
/*
 *	vim:ft=php:fenc=UTF-8:ts=4:sts=0:sw=4:noexpandtab:foldmethod=marker:foldlevel=0:
 *
 * lblmail is a small utility written in PHP, it allow you to label emails based on
 * rules Ã  la procmail, the advantage over procmail is the ability to apply the label
 * to the given mail file, which means you can post-process the mail.
 *
 * Copyright (c) 2007 Wael Nasreddine <wael.nasreddine@gmail.com>
 *
 * This file is part of LblMail.
 *
 * LblMail is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * LblMail is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with LblMail.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

$HOME = getenv('HOME');

/** Define the location of the config file */
define('CONFIG_FILE_PATH', $HOME . '/.lblmailrc');

/** Define the share dir path */
define('SHARE_DIR', '@SHAREDIR@');

/** Define the lib dir path */
define('LIB_DIR', realpath(dirname(__FILE__)));

/** Check if the user has actually created a config file, exception if not */
if(!file_exists(CONFIG_FILE_PATH)) {
	die("You should create " . CONFIG_FILE_PATH . " and put your configs there\nYou can copy the sample file from " . SHARE_DIR . "/lblmailrc.example\n");
}

/** Do we have an email file */
if(count($argv) < 2) {
	die("USAGE: lblmail <mail file>\n");
}

/** Get the mail file */
$mailFile = $argv[1];

/** define an empty operations */
$operations = array();

/** Include the config file */
require_once(CONFIG_FILE_PATH);

/** Include the Mail and Labels classes */
require_once(LIB_DIR . '/MailEditor.class.php');
require_once(LIB_DIR . '/Labels.class.php');

/** Create the MailEditor object */
try {
	$mailEditor = new MailEditor($mailFile);
} catch (Exception $e) {
	die($e->getMessage() . "\n");
}

/** Pass all the operations from the config file */
try {
	$mailEditor->doOperations($operations);
} catch (Exception $e) {
	die($e->getMessage() . "\n");
}

/** Save the mail file */
try {
	$mailEditor->save();
} catch (Exception $e) {
	die($e->getMessage() . "\n");
}

/** Do we need to write the labels file ? */
if(isset($labelsFile) && !empty($labelsFile)) {

	/** Create the labels object */
	try {
		$labels = new Labels($labelsFile);
	} catch (Exception $e) {
		die($e->getMessage() . "\n");
	}

	/** add labels */
	try {
		$labels->addLabel($mailEditor->getLabels());
	} catch (Exception $e) {
		die($e->getMessage() . "\n");
	}

	/** Save the file */
	try {
		$labels->save();
	} catch (Exception $e) {
		die($e->getMessage() . "\n");
	}
}

/** Output some informations */
if(count($mailEditor->getLabels()) > 0) {
	/** Initilize the string */
	$labelsString = '';

	$sep = '';
	foreach($mailEditor->getLabels() as $label) {
		$labelsString .= $sep . $label;

		$sep = ', ';
	}

	echo "Found " . count($mailEditor->getLabels()) . " label(s) for this message: " . $labelsString . "\n";
} else {
	echo "No labels has been found.";
}

?>