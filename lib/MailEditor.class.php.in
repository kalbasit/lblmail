<?php
/*
 *	vim:ft=php:fenc=UTF-8:ts=4:sts=0:sw=4:noexpandtab:foldmethod=marker:foldlevel=0:
 *
 * lblmail is a small utility written in PHP, it allow you to label emails based on
 * rules Ã  la procmail, the advantage over procmail is the ability to apply the label
 * to the given mail file, which means you can post-process the mail.
 *
 * Copyright (c) 2007 Wael Nasreddine <wael.nasreddine@gmail.com>
 *
 * This file is part of LblMail.
 *
 * LblMail is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * LblMail is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with LblMail.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

class MailEditor {

	/** This represents the path to the mailFile */
	protected $_mailFile = null;

	/** this represents the contents of the email as is */
	protected $_content  = '';

	/** These represents the collected information about the email */
	protected $_headers  = '';
	protected $_from     = '';
	protected $_to       = '';
	protected $_subject  = '';
	protected $_message  = '';

	/**
	 * Create an email editor object out of an email file (NOT an mbox file)
	 *
	 * @param string $mailFile The path to the mail file
	 * @return $this
	 */
	public function __construct($mailFile) {

		/** Sanity check */
		if(file_exists($mailFile) === false) {
			throw new Exception($mailFile . ' does not exist or can not be opened');
		}

		/** record the path */
		$this->_mailFile = $mailFile;

		/** Extract the content */
		$this->_extractContent();

		/** Extract the known information from the email */
		$this->_extractInformation();
	}

	/**
	 * Exctract the content of an email
	 *
	 * @return void
	 */
	protected function _extractContent() {

		/** Open the file as read-only */
		$fd = fopen($this->_mailFile, "r");

		/** Get the contents */
		$this->_content = fread($fd, filesize($this->_mailFile));

		/** Close the file */
		fclose($fd);
	}

	/**
	 * This functions extracts all known information from $this->_content
	 *
	 * @return void
	 */
	protected function _extractInformation() {

		/** get the lines */
		$lines = explode("\n", $this->_content);

		/** At first we are parsing the headers */
		$splittingHeaders = true;

		for ($i=0; $i < count($lines); $i++) {

			/** Is this an empty line ? */
			if (trim($lines[$i])=="") {
				/** empty line, header section has ended */
				$splittingHeaders = false;

				/** We don't want to include this empty line in the headers */
				continue;
			}

			/** Treat this line and put it somewhere */
			if ($splittingHeaders === true) {
				/** this is a header */
				$this->_headers .= $lines[$i]."\n";

				/** look out for special headers */
				if (preg_match("/^Subject: (.*)/", $lines[$i], $matches)) {
					$this->_subject = $matches[1];
				}
				if (preg_match("/^From: (.*)/", $lines[$i], $matches)) {
					$this->_from = $matches[1];
				}
				if (preg_match("/^To: (.*)/", $lines[$i], $matches)) {
					$this->_to = $matches[1];
				}
			} else {
				/** not a header, but message */
				$this->_message .= $lines[$i]."\n";
			}
		}
	}

	/**
	 * This function is used to merge the header and message back in content
	 *
	 * @return void
	 */
	protected function _mergeHeaderMessage() {}

	/**
	 * An accessor to $this->_content
	 *
	 * @return string
	 */
	public function getContent() {

		return $this->_content;
	}

	/**
	 * An accessor to $this->_headers
	 *
	 * @return string
	 */
	public function getHeaders() {

		return $this->_headers;
	}

	/**
	 * An accessor to $this->_message
	 *
	 * @return string
	 */
	public function getMessage() {

		return $this->_message;
	}

	/**
	 * An accessor to all collected information
	 *
	 * @return array
	 */
	public function getEverything() {

		$everything = array(
			'from'		=> $this->_from,
			'to'		=> $this->_to,
			'headers'	=> $this->_headers,
			'message'	=> $this->_message,
		);

		return $everything;
	}

	/**
	 * Do given operations on the mail
	 *
	 * @param array $operations
	 * @return bool
	 */
	public function doOperations($operations) {

		/** cycle through operations and do one by one */
		foreach($operations as $operation) { }
	}

	/**
	 * Add a label to the email
	 *
	 * @param string $label
	 * @return void
	 */
	public function addLabel($label) {}

	/**
	 * Save the mail to mailFile
	 *
	 * @return bool
	 */
	public function save() {}
}
?>